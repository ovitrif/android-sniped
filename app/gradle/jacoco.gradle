apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacoco_version"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

project.afterEvaluate {

    android.applicationVariants.all { variant ->
        def variantName = variant.name
        def testTaskName = "test${variantName.capitalize()}UnitTest"
        def uiTestCoverageTaskName = "create${variantName.capitalize()}CoverageReport"

        tasks.create(name: "${testTaskName}Coverage", type: JacocoReport, dependsOn: ["$testTaskName", "$uiTestCoverageTaskName"]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports for the ${variantName.capitalize()} build."

            reports {
                html.enabled = true
                xml.enabled = true
            }

            def fileFilter = [
                    '**/*$InjectAdapter.class',
                    '**/*$ModuleAdapter.class',
                    '**/*$ViewBinder*.*',
                    '**/*$ViewInjector*.*',
                    '**/*Builder.*',
                    '**/*JavascriptBridge.class',
                    '**/*Test*.*',
                    '**/AutoValue_*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/R$*.class',
                    '**/R.class',
                    'android/**/*.*',
                    // Dagger2 generated code
                    '**/*_*Factory*.*',
                    '**/*_MembersInjector*.*',
                    '**/*_MembersInjector.class',
                    // ButterKnife generated code
                    '**/*_*ViewBinding*.*',
                    // DI Code
                    '**/*Component*.*',
                    '**/*Module*.*',
                    // UI Code
                    '**/*Fragment.*',
                    '**/*Activity.*',
                    '**/*Navigator.*',
                    '**/*App*.*',
                    // Extension functions
                    '**/extensions/**/*.*',
            ]

            def javaClasses = fileTree(dir: variant.javaCompiler.destinationDir, excludes: fileFilter)
            def kotlinClasses = fileTree(dir: "$buildDir/tmp/kotlin-classes/$variantName", excludes: fileFilter)
            classDirectories = files([javaClasses, kotlinClasses])

            sourceDirectories = files([
                    "$project.projectDir/src/main/java",
                    "$project.projectDir/src/$variantName/java",
                    "$project.projectDir/src/main/kotlin",
                    "$project.projectDir/src/$variantName/kotlin",
            ])

            executionData = files([
                    "$project.buildDir/jacoco/${testTaskName}.exec",
                    "$project.buildDir/outputs/code-coverage/connected/flavors/$variant.flavorName/coverage.ec"
            ])
        }
    }
}
